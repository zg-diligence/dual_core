1.Arm Versatile Express
  a hardware platform
  well supported by mainline linux kernel、uboot and qemu
  run on the Cortex-A9 core which is included in many smartphones


2.Cross Compiler Tool Chain
The difference between a Native compiler (gcc) and a cross-compiler(e.g arm-none-linux gnueabi-gcc) is that the Native compiler runs on an architecture (for example x86_64) and produces binaries for the same architecture.  A cross-compiler produces binaries for a different architecture (in our case ARMv7).


3.QEMU
  QEMU是一套由Fabrice Bellard所编写的模拟处理器的自由软件。它与Bochs，PearPC近似，但其具有某些后两者所不具备的特性，如高速度及跨平台的特性。经由KVM（早期为kqemu加速器，现在kqemu已被KVM替换）这个开源的加速器，QEMU能模拟至接近真实电脑的速度。QEMU有两种主要运作模式：
  User mode模拟模式，亦即是用户模式。QEMU能引导那些为不同中央处理器编译的Linux程序。而Wine及Dosemu是其主要目标；
  System mode模拟模式，亦即是系统模式。QEMU能模拟整个电脑系统，包括中央处理器及其他周边设备。它使得为系统源代码进行测试及除错工作变得容易。其亦能用来在一部主机上虚拟数部不同虚拟电脑。


4.根文件系统的基本目录结构
	/bin 存放二进制可执行命令的目录　　
	/dev 存放设备文件的目录　　
	/etc 存放系统管理和配置文件的目录　　
	/home 用户主目录，比如用户user的主目录就是
	/home/user，可以用~user表示　　
	/lib 存放动态链接共享库的目录　　
	/sbin存放系统管理员使用的管理程序的目录　　
	/tmp 公用的临时文件存储点　　
	/root 系统管理员的主目录　　
	/mnt 系统提供这个目录是让用户临时挂载其他的文件系统。　　
	/proc 虚拟文件系统，可直接访问这个目录来获取系统信息。　　
	/var 某些大文件的溢出区　　
	/usr 最庞大的目录，要用到的应用程序和文件几乎都在这个目录。　　
	对于经常使用Linux系统的读者来说，这些目录大部分应该很熟悉了。不过有几个目录对初学者来说容易混淆，如/bin，/sbin，/usr/bin和/usr/sbin。这里简单介绍一下它们的区别：/bin目录一般存放对于用户和系统来说都是必须的二进制文件，而/sbin目录要存放的是只针对系统管理的二进制文件，该目录的文件将不会被普通用户使用。相反，那些不是必要的用户二进制文件存放在/usr/bin下面，那些不是非常必要的系统管理工具放在/usr/sbin下。此外，对于一些本地的库也非常类似，对于那些要求启动系统和运行的必须命令要存放在/lib目录下，而对于其他不是必须的库存放在/usr/lib目录就可以。

6.相关参数说明
	镜像文件
	vmlinux     编译出来的最原始的内核文件，未压缩
	zImage      由mlinux经过gzip压缩后的文件
	bzImage 	big zImage。 zImage解压缩内核到低端内存（640K），bzImage解压缩内核到高端内存（1M以上）。如果内核比较小，采用zImage或者bzImage都行，如果比较大应该用bzImage
	uImage      U-boot专用的映像文件，它是在zImage之前加上一个长度为0x40的tag
	vmlinuz     是zImage/bzImage文件的拷贝或者是指向zImage/bzImage的链接
	initrd      initial ramdisk。linux系统引导过程当中挂载的一个临时根文件系统，被挂载于/dev/ram，它用于支持Linux第二阶段的引导过程。它是使用gzip进行压缩的cpio文件

	QEMU
	qemu-system-i386        QEMU 模拟i386指令CPU的模拟器
	qemu-system-x86_64   	QEMU 模拟x86_64指令CPU的模拟器
	qemu -kernel   			参数，使用bzimage作为linux内核
	qemu -initrd    		参数，指定initrd镜像
	qemu -append 			参数，附加内核启动参数

	内核启动参数
	root=       			使用哪个设备作为根文件系统。
	rdinit=      			内核加载完毕之后，即运行initrd中指定路径的程序，来创建linux的第一个进程
	init=         			内核加载完毕之后，即运行initramfs中指定路径的程序，来创建linux的第一个进程
	noapic      			apic，高级可编程中断控制器。这里用于防止发生MP-BIOS BUG 8254 timer not connected

7.linux加载和启动过程
	1.系统启动
	加载BIOS 上电自检POST + 枚举初始化本地设备

	2.第一阶段引导程序 MBR
	这一阶段主要是找到并加载第二阶段引导程序
	MBR = bootloader 1-446 + partition table 447-510 + magic number 511-512

	3.第二阶段引导程序（引导内核程序）
	这一阶段主要是加载Linux内核和可选的初始磁盘

	第一二阶段引导程序构成GRUB GRand Unified BootLoader(1=>1.5=>2)

	4.内核启动，第一个进程systemed
	挂载文件系统、开启和管理linux主机服务

